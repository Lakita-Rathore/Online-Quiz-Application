import React, { useState, useEffect } from 'react';

const QuizApp = () => {
  // Sample quiz data - in a real app this would come from an API or database
  const quizQuestions = [
    {
      id: 1,
      question: "What is the capital of France?",
      options: ["London", "Berlin", "Paris", "Madrid"],
      correctAnswer: 2
    },
    {
      id: 2,
      question: "Which planet is known as the Red Planet?",
      options: ["Venus", "Mars", "Jupiter", "Saturn"],
      correctAnswer: 1
    },
    {
      id: 3,
      question: "What is the largest mammal in the world?",
      options: ["Elephant", "Blue Whale", "Giraffe", "Polar Bear"],
      correctAnswer: 1
    },
    {
      id: 4,
      question: "Which element has the chemical symbol 'O'?",
      options: ["Gold", "Oxygen", "Osmium", "Oganesson"],
      correctAnswer: 1
    },
    {
      id: 5,
      question: "Who painted the Mona Lisa?",
      options: ["Vincent van Gogh", "Pablo Picasso", "Leonardo da Vinci", "Michelangelo"],
      correctAnswer: 2
    }
  ];

  // State management
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(60); // 60 seconds per quiz
  const [selectedOption, setSelectedOption] = useState<number | null>(null);
  const [quizFinished, setQuizFinished] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);

  // Timer effect
  useEffect(() => {
    if (timeLeft <= 0 && !quizFinished) {
      finishQuiz();
      return;
    }

    if (!quizFinished) {
      const timer = setTimeout(() => {
        setTimeLeft(timeLeft - 1);
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [timeLeft, quizFinished]);

  // Handle option selection
  const handleOptionSelect = (optionIndex: number) => {
    if (selectedOption !== null || quizFinished) return; // Prevent changing answer
    
    setSelectedOption(optionIndex);
    
    // Check if the answer is correct
    const isCorrect = optionIndex === quizQuestions[currentQuestionIndex].correctAnswer;
    
    if (isCorrect) {
      setScore(score + 1);
    }
    
    // Show feedback for a moment before moving to next question
    setShowFeedback(true);
    setTimeout(() => {
      setShowFeedback(false);
      moveToNextQuestion();
    }, 1500);
  };

  // Move to next question or finish quiz
  const moveToNextQuestion = () => {
    if (currentQuestionIndex < quizQuestions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedOption(null);
    } else {
      finishQuiz();
    }
  };

  // Finish the quiz
  const finishQuiz = () => {
    setQuizFinished(true);
  };

  // Restart the quiz
  const restartQuiz = () => {
    setCurrentQuestionIndex(0);
    setScore(0);
    setTimeLeft(60);
    setSelectedOption(null);
    setQuizFinished(false);
    setShowFeedback(false);
  };

  // Calculate score percentage
  const scorePercentage = Math.round((score / quizQuestions.length) * 100);

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <div className="w-full max-w-2xl bg-card rounded-lg shadow-lg p-6">
        {!quizFinished ? (
          <>
            {/* Quiz Header */}
            <div className="flex justify-between items-center mb-6">
              <div className="text-sm font-medium text-muted-foreground">
                Question {currentQuestionIndex + 1} of {quizQuestions.length}
              </div>
              <div className="text-sm font-medium text-muted-foreground flex items-center">
                <svg 
                  className="w-4 h-4 mr-1 text-primary" 
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6
